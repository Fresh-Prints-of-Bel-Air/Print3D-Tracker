const express = require('express');
const router = express.Router();
const { check, validationResult } = require('express-validator/check');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const config = require('config');
const User = require('../models/User');

// @route   POST api/users
// @desc    Register
// @access

router.post(
  '/',
  // this parameter contains the middleware,
  // check calls from express-validator/check
  [
    check('name', 'Please add name').not().isEmpty(),
    check('email', 'Please include a valid email').isEmail(),
    check('password', 'Please enter 6 or more characters').isLength({ min: 6 }),
  ],
  async (req, res) => {
    // contains errors as a result of the check calls
    const errors = validationResult(req);
    // if we have errors, we return a status 400
    if (!errors.isEmpty()) {
      // 400 bad request
      return res.status(400).json({
        errors: errors.array(),
      });
    }
    // destructuring the fields from the request
    const { name, email, password } = req.body;

    try {
      // Mongoose call to find a User with that email, to see if it's already been registered
      user = await User.findOne({ email: email });

      // evaluates to true if a user with that email was found
      if (user) {
        return res.status(400).json({
          msg: 'User already exists',
        });
      }

      // Creates new user object out of the destructured variables from the request
      user = new User({
        name,
        email,
        password,
      });

      // generates salt for hashing function
      const salt = await bcrypt.genSalt(10);
      // password is saved only as a hash code
      user.password = await bcrypt.hash(password, salt);

      // saves user to the database
      await user.save();

      // creating JSON Web Token
      // a payload object is defined with a user with an id set to the id field that's generated by Mongoose
      const payload = {
        user: {
          id: user.id,
        },
      };

      // using the payload and the secret, creates and signs a token
      jwt.sign(
        payload,
        config.get('jwtSecret'),
        {
          expiresIn: 360000,
        },
        (err, token) => {
          if (err) throw err;
          // returns the token and concludes the function
          res.json({ token });
        }
      );
    } catch (err) {
      console.error(err.message);
      res.status(500).send('Server Error');
    }
  }
);

// @route   PUT api/users
// @desc    Update a user
// @access
router.put()

module.exports = router;
