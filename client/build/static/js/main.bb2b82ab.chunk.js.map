{"version":3,"sources":["logo.svg","components/layout/Navbar.js","components/auth/Login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","style","marginBottom","className","id","class","to","Login","props","useEffect","useState","email","password","user","type","for","App","M","AutoInit","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6IAAAA,EAAOC,QAAU,IAA0B,kC,4JCe5BC,EAZO,WAClB,OACI,yBAAKC,MAAO,CAAEC,aAAc,QAAUC,UAAU,QAC5C,yBAAKA,UAAU,eACX,wBAAIC,GAAG,aAAaC,MAAM,8BACtB,4BAAI,kBAAC,IAAD,CAAMC,GAAG,SAAT,mB,QC8BTC,EApCM,SAACC,GACpBC,qBAAU,eADoB,MAENC,mBAAS,CAC/BC,MAAO,GACPC,SAAU,KAJkB,mBAEvBC,EAFuB,UAMFA,EAApBF,MAAoBE,EAAbD,SAEf,OACE,6BACE,wBAAIT,UAAU,gBAAd,SAEA,0BAAMA,UAAU,gBACd,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,gCACb,2BAAOC,GAAG,QAAQU,KAAK,QAAQX,UAAU,aACzC,2BAAOY,IAAI,SAAX,WAIJ,yBAAKZ,UAAU,oBACb,yBAAKA,UAAU,gCACb,2BAAOC,GAAG,WAAWU,KAAK,WAAWX,UAAU,aAC/C,2BAAOY,IAAI,YAAX,eAIN,kBAAC,WAAD,KACE,4BACE,kBAAC,IAAD,CAAMT,GAAG,aAAT,yBCcKU,MApCf,WAIE,OAHAP,qBAAU,WACRQ,IAAEC,cAGF,kBAAC,WAAD,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,UAAWd,QCN5Be,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bb2b82ab.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport const Navbar = () => {\n    return (\n        <nav style={{ marginBottom: '30px' }} className='blue'>\n            <div className=\"nav-wrapper\">\n                <ul id=\"nav-mobile\" class=\"right hide-on-med-and-down\">\n                    <li><Link to='login'>Login TEST</Link></li>\n                </ul>\n            </div>\n        </nav>\n    )\n}\n\nexport default Navbar;","import React, { Fragment, useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nexport const Login = (props) => {\n  useEffect(() => {});\n  const [user, setUser] = useState({\n    email: '',\n    password: '',\n  });\n  const { email, password } = user;\n\n  return (\n    <div>\n      <h2 className='center-align'>Login</h2>\n\n      <form className='center-align'>\n        <div className='row center-align'>\n          <div className='input-field col s4 offset-s4'>\n            <input id='email' type='email' className='validate' />\n            <label for='email'>Email</label>\n          </div>\n        </div>\n\n        <div className='row center-align'>\n          <div className='input-field col s4 offset-s4'>\n            <input id='password' type='password' className='validate' />\n            <label for='password'>Password</label>\n          </div>\n        </div>\n      </form>\n      <Fragment>\n        <li>\n          <Link to='/Register'>Need to Register?</Link>\n        </li>\n      </Fragment>\n    </div>\n  );\n};\n\nexport default Login;\n","import React, { Fragment, useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'materialize-css/dist/css/materialize.min.css';\nimport M from 'materialize-css/dist/js/materialize.min.js';\nimport Navbar from './components/layout/Navbar';\nimport Login from './components/auth/Login';\n\nfunction App() {\n  useEffect(() => {\n    M.AutoInit();\n  });\n  return (\n    <Fragment>\n      <Router>\n        <Navbar />\n        <Switch>\n          <Route exact path='/login' component={Login} />\n        </Switch>\n      </Router>\n    </Fragment>\n  );\n}\n\n/* auto-generated div\n\n<div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n*/\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}